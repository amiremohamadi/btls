WHITESPACE = _{ (" " | "\t" | "\r" | "\n")+ }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }
NEWLINE    = _{ "\r\n" | "\n" }

identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }
string     = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
number     = @{ ASCII_DIGIT+ }

primary   =  { string | number | call | identifier | ("$" ~ identifier) }
expr_list =  { (expr ~ ("," ~ expr)*)? }
expr      =  { primary ~ (infix ~ primary)* }
infix     = _{ add | sub | mul | div | le | lt | ge | gt | eq | ne | and | or }
add       =  { "+" }
sub       =  { "-" }
mul       =  { "*" }
div       =  { "/" }
le        =  { "<=" }
lt        =  { "<" }
ge        =  { ">=" }
gt        =  { ">" }
eq        =  { "==" }
ne        =  { "!=" }
and       =  { "&&" }
or        =  { "||" }

assign_op  = { "=" | "+=" | "-=" }
assignment = { "$" ~ identifier ~ assign_op ~ expr }
call       = { identifier ~ "(" ~ expr_list ~ ")" }
if         = { "if" ~ "(" ~ expr ~ ")" ~ block }
while      = { "while" ~ "(" ~ expr ~ ")" ~ block }
base_stmt  = _{ assignment | expr }
statement  = { base_stmt ~ ";" | if | while }
block      = { "{" ~ (COMMENT | statement | error)* ~ "}" }

attach_point      = { (identifier | ":" | "*")+ }
attach_point_list = { attach_point ~ ("," ~ attach_point)* }
probe_condition   = { "/" ~ expr ~ "/" }
probe             = { attach_point_list ~ probe_condition? ~ block }
preamble          = { probe }

error        =  { rest_of_line }
rest_of_line = @{ (!(NEWLINE | "}") ~ ANY)+ ~ NEWLINE? }

unmatched_brace = { "}" }
program = { SOI ~ (COMMENT | preamble | error | unmatched_brace)* ~ EOI }
